# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8
        pip install -r requirements.txt
        pip install .
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Check for version change
      uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          version:
            - '**/VERSION.txt'
    - if: steps.filter.outputs.version == 'true'
      name: Cleanup README
      run: |
        sed -ri 's/^(##*)\s*:.*:\s*/\1 /g' README.md
        awk '{if (match($0,"## Supporters")) exit; print}' README.md > README
        mv -f README README.md
    - if: steps.filter.outputs.version == 'true'
      run: python3 -m pip install --upgrade build && python3 -m build
    - if: steps.filter.outputs.version == 'true'
      name: Upload to PyPi
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true
        verify_metadata: false
